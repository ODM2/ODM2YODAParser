"""Subclass of clsDBConfiguration, which is generated by wxFormBuilder."""

# import wx
from wx import Dialog,MessageBox,\
    BoxSizer, Size, ALL,  VERTICAL, FLEX_GROWMODE_ALL, EXPAND,  GROW, \
    DEFAULT_DIALOG_STYLE, OK, ICON_EXCLAMATION, ICON_ERROR



from yodatools.dataloader.view.clsDBConfig import clsDBConfiguration
from odm2api.ODMconnection import dbconnection as dbc

class frmDBConfig(Dialog):
    def __init__(self, parent, service_manager, is_main=False):
        Dialog.__init__(
            self,
            parent,
            title='Database Configuration',
            style=DEFAULT_DIALOG_STYLE, size=Size(500, 315)
        )
        self.panel = pnlDBConfig(self, service_manager, is_main)
        self.sizer = BoxSizer(VERTICAL)
        self.sizer.AddWindow(self.panel, 1, border=1, flag=EXPAND | GROW | ALL)  # noqa
        self.SetSizer(self.sizer)
        self.sizer.Fit(self.panel)
        self.connection_string = None


# Implementing clsDBConfiguration
class pnlDBConfig(clsDBConfiguration):
    def __init__(self, parent,  is_main=False):
        clsDBConfiguration.__init__(self, parent)

        self.choices = {
            'Microsoft SQL Server': 'mssql',
            'MySQL': 'mysql',
            'PostgreSQL': 'postgresql',
            'SQLite': 'sqlite'
        }
        self.cbDatabaseType.AppendItems(self.choices.keys())

        self.parent = parent
        self.is_main = is_main


    def OnValueChanged(self, event):
        """

        :param event:
        :return:

        """
        # self.btnSave.Enable(False)

        try:
            curr_dict = self.getFieldValues()
            if self.conn_dict == curr_dict:
                # self.btnSave.Enable(True)
                pass
            else:
                self.btnTest.Enable(True)

        except:
            pass

    # Handlers for clsDBConfiguration events.
    def OnBtnTest(self, event):
        conn_dict = self.getFieldValues()
        if self.validateInput(conn_dict):
            # self.btnSave.Enable(True)
            self.conn_dict = conn_dict
            # self.connection_string = dbc.createConnection(self.conn_dict)
            # self.btnTest.Enable(False)

    # def OnBtnSave(self, event):
    #
    #     # self.parent.EndModal(ID_OK)
    #     raise NotImplementedError

    # def OnBtnCancel(self, event):
    #     self.parent.SetReturnCode(ID_CANCEL)
    #     self.parent.EndModal(ID_CANCEL)

    def validateInput(self, conn_dict):
        message = ''
        if conn_dict['engine'] == "sqlite":
            if not conn_dict['address']:
                message = 'Please fill out the file path field in order to proceed'
                MessageBox(message, 'Database Connection', OK | ICON_EXCLAMATION)  # noqa
                return False
        else:
            # Check that everything has been filled out.
            if not all(x for x in conn_dict.values()):
                message = 'Please complete every field in order to proceed'
                MessageBox(message, 'Database Connection', OK | ICON_EXCLAMATION)  # noqa
                return False

        try:
            self.connection_string = dbc.buildConnectionString(**conn_dict)
            if dbc.isValidConnection(self.connection_string):
                message = 'This connection is valid'
                MessageBox(message, 'Test Connection', OK)
            else:

                MessageBox(message, 'Error Occurred', OK | ICON_ERROR)
                return False
        except Exception as e:
            msg ="This connection is invalid"
            print (msg + str(e))
            MessageBox(msg, 'Error Occurred', ICON_ERROR | OK)  # noqa
            return False
            # MessageBox(e.message, 'Error Occurred', ICON_ERROR | OK)

        return True

    # Returns a dictionary of the database values entered in the form
    def getFieldValues(self):
        conn_dict = {}

        conn_dict['engine'] = self.choices[self.cbDatabaseType.GetValue()]
        conn_dict['user'] = self.txtUser.GetValue()
        conn_dict['password'] = self.txtPass.GetValue()
        conn_dict['address'] = self.txtServer.GetValue()
        conn_dict['db'] = self.txtDBName.GetValue()
        # conn_dict['version'] = ''

        return conn_dict

